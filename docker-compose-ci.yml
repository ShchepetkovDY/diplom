# Определение версии Docker Compose и начало описания сервисов
version: '3.9'

services:
  pgdb:
    # Использование готового образа postgres
    image: postgres:15.2
    # Задание переменных окружения для контейнера с postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    restart: always
    # Задание имени контейнера для сервиса pgdb
    container_name: pgdb
    # Связывание тома с директорией в контейнере для сохранения данных postgres
    volumes:
      - pgdb_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 15

  migrations:
    image: dshchepetkov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    command: python manage.py migrate
    #env_file: .env.prod
    environment:
      DB_HOST: pgdb
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: 1
      BOT_TOKEN: ${BOT_TOKEN}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      pgdb:
        condition: service_healthy


  api:
    image: dshchepetkov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: api
    command: gunicorn todolist.wsgi:application --bind 0.0.0.0:8000
    #env_file: .env.prod
    environment:
      DB_HOST: pgdb
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      BOT_TOKEN: ${BOT_TOKEN}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    restart: always
    depends_on:
      pgdb:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  bot:
    image: dshchepetkov/todolist:${GITHUB_REF_NAME}-${GITHUB_RUN_ID}
    container_name: bot
    restart: always
    environment:
      DB_HOST: pgdb
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      BOT_TOKEN: ${BOT_TOKEN}
      SOCIAL_AUTH_VK_OAUTH2_KEY: ${SOCIAL_AUTH_VK_OAUTH2_KEY}
      SOCIAL_AUTH_VK_OAUTH2_SECRET: ${SOCIAL_AUTH_VK_OAUTH2_SECRET}
    depends_on:
      pgdb:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: python manage.py runbot

  frontend:
    image: sermalenk/skypro-front:lesson-38
    container_name: frontend
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_started

volumes:
  pgdb_data: